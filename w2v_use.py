import pandas
import xgboost as xgb
import numpy
import sklearn
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score
import gc
import gensim
from dtypes import dtypes

gc.enable()

def vectorize(input):
    word = str(input)
    if word in model.wv:
        # print('wow')
        return model.wv[word]
    else:
        return numpy.zeros(20)

model = gensim.models.Word2Vec.load('w2v_model_1mln.mdl')
# print(len(model.wv.vocab))
# exit()
cat_columns = [key for key, value in dtypes.items() if value is 'category']
cat_columns.remove('MachineIdentifier')
N = None
train_cat = pandas.read_csv('train.csv', dtype=dtypes, nrows=N, low_memory=True, usecols=cat_columns)
test_cat = pandas.read_csv('test.csv', dtype=dtypes, nrows=N, low_memory=True, usecols=cat_columns)

train_cat = train_cat.applymap(vectorize)
for col in cat_columns:
    series = train_cat[col].apply(pandas.Series)
    train_cat = train_cat.drop([col], axis=1)
    series = series.rename(columns = lambda x : col + '_' + str(x))
    train_cat = pandas.concat([train_cat[:], series[:]], axis=1)

gc.collect()
# print(train_cat)
# exit()
test_cat = test_cat.applymap(vectorize)
for col in cat_columns:
    series = test_cat[col].apply(pandas.Series)
    test_cat = test_cat.drop([col], axis=1)
    series = series.rename(columns = lambda x : col + '_' + str(x))
    test_cat = pandas.concat([test_cat[:], series[:]], axis=1)

gc.collect()

numeric_columns = [key for key, value in dtypes.items() if value is not 'category']
train_numeric = pandas.read_csv('train.csv', dtype=dtypes, nrows=N, low_memory=True, usecols=numeric_columns)
train_numeric = train_numeric.fillna(value=0)
numeric_columns.remove('HasDetections')
test_numeric = pandas.read_csv('test.csv', dtype=dtypes, nrows=N, low_memory=True, usecols=numeric_columns)
test_numeric = test_numeric.fillna(value=0)

# print(len(list(train_numeric)))
# print(len(list(test_numeric)))
# exit()

train_y_matrix = train_numeric[['HasDetections']].to_numpy()
train_numeric = train_numeric.drop(['HasDetections'], axis=1)

gc.collect()

train_x_matrix = numpy.hstack((train_cat.to_numpy(), train_numeric.to_numpy()))
del train_cat, train_numeric
gc.collect()
test_x_matrix = numpy.hstack((test_cat.to_numpy(), test_numeric.to_numpy()))
del test_cat, test_numeric
gc.collect()

clf = RandomForestClassifier(n_estimators=20)
clf = clf.fit(train_x_matrix, train_y_matrix)

predictions = clf.predict(train_x_matrix)
accuracy = roc_auc_score(train_y_matrix, predictions)
print(accuracy)

# TODO: Необходимо еще соблюсти одинаковый порядок столбцов!!!

test_cat = pandas.read_csv('test.csv', dtype=dtypes, nrows=N, low_memory=True, usecols=['MachineIdentifier'])
predictions = clf.predict(test_x_matrix)
submission_df = test_cat[['MachineIdentifier']]
submission_df['HasDetections'] = predictions
# print(submission_df)
submission_df.to_csv('submission.csv')