import pandas
import xgboost as xgb
import numpy
import sklearn
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score
import gc

gc.enable()

dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int8',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float16',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }

def prepare(data_frame):
    x = data_frame.loc[:, data_frame.columns != 'HasDetections']
    x = x.loc[:, x.columns != 'MachineIdentifier']
    
    y = None
    if 'HasDetections' in data_frame:
        y = data_frame[['HasDetections']]

    cat_x = x.select_dtypes(include=['category'])
    cat_columns = list(cat_x)
    # print(train_x)
    x = pandas.get_dummies(x, columns=cat_columns)

    int64 = x.select_dtypes(include=['int64'])
    float64 = x.select_dtypes(include=['float64'])
    int64_columns = list(int64)
    float64_columns = list(float64)

    # x = x[int64_columns].to_numeric(x[int64_columns], downcast='integer')
    # x = x[float64_columns].to_numeric(x[float64_columns], downcast='float')

    for col in int64_columns:
        pandas.to_numeric(x[col], downcast='integer')

    for col in float64_columns:
        pandas.to_numeric(x[col], downcast='float')
    # print(train_x_categorical)
    return x, y

train = pandas.read_csv('train.csv', dtype=dtypes, nrows=1000, low_memory=True)
train = train.fillna(value=0)
# train = train.dropna(thresh=5)
train_x_categorical, train_y = prepare(train)
train_columns = list(train_x_categorical)

train_x_matrix = train_x_categorical.to_numpy()
train_y_matrix = train_y.to_numpy()
print(train_x_matrix.shape)
print(train_y_matrix.shape)
# exit()

clf = RandomForestClassifier(n_estimators=20)
clf = clf.fit(train_x_matrix, train_y_matrix)

predictions = clf.predict(train_x_matrix)
accuracy = roc_auc_score(train_y_matrix, predictions)
print(accuracy)
# exit()
del train_y_matrix
del train_x_categorical
del train
gc.collect()


# need translate to categorical with test data or ignoring test cateroies
test = pandas.read_csv('test.csv', dtype=dtypes, nrows=None, low_memory=True)
test_x_categorical, test_y = prepare(test)
test_columns = list(test_x_categorical)
train_set = set(train_columns)
test_set = set(test_columns)
intersection_columns = list(train_set & test_set)
print(len(train_columns))
print(len(test_columns))
print(len(intersection_columns))
# exit()
# df.drop(['B', 'C'], axis=1)
train_u_columns = list(train_set.difference(test_set))
# print(train_u_columns)
# exit()
test_x_categorical = test_x_categorical[intersection_columns]
for col_name in train_u_columns:
    test_x_categorical[col_name] = 0
# exit()
test_x_matrix = test_x_categorical.to_numpy()
del test
gc.collect()

# TODO: Необходимо еще соблюсти одинаковый порядок столбцов!!!

predictions = clf.predict(test_x_matrix)
submission_df = test[['MachineIdentifier']]
submission_df['HasDetections'] = predictions
# print(submission_df)
submission_df.to_csv('submission.csv')