import pandas as pd
import numpy as np
from scipy.sparse import vstack, csr_matrix, save_npz, load_npz
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.model_selection import StratifiedKFold
from sklearn.neural_network import MLPRegressor
#from sklearn.metrics import roc_auc_score
import gc
gc.enable()
from keras.models import Sequential
from keras.layers import Dense, Embedding
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import roc_auc_score

from dtypes import dtypes

import time



cat_columns = [key for key, value in dtypes.items() if value is 'category']
cat_types = {key: value for key, value in dtypes.items() if value is 'category'}
# cat_columns.remove('MachineIdentifier')
# cat_types.pop('MachineIdentifier', None)

print('Load category features')
train = pd.read_csv('train.csv', dtype=cat_types, low_memory=True, nrows=100000)
test  = pd.read_csv('test.csv',  dtype=cat_types, low_memory=True, nrows=None)

# train = train.fillna(0)
# test = test.fillna(0)

train = train.replace(np.nan, 0)
test = test.replace(np.nan, 0)

print('Transform category features')

for usecol in cat_columns:
    train[usecol] = train[usecol].astype('str')
    test[usecol] = test[usecol].astype('str')
    
    #Fit LabelEncoder
    le = LabelEncoder().fit(
            np.unique(train[usecol].unique().tolist()+
                      test[usecol].unique().tolist()))

    #At the end 0 will be used for dropped values
    train[usecol] = le.transform(train[usecol])+1
    test[usecol]  = le.transform(test[usecol])+1



    del le, usecol
    gc.collect()

# all_cols = list(train)
# x_cols = all_.remove('MachineIdentifier')
train_x = np.array(train.drop(['HasDetections'], axis=1))
# print(train_x)
# exit()
train_y = np.array(train['HasDetections'])  
# np.save('train_np_x', train)  
test = np.array(test)  
# np.save('test_np_x', test)  

model = RandomForestRegressor(n_estimators=20)
model.fit(train_x, train_y)
result = model.predict(test)

submission = pd.read_csv('sample_submission.csv')
submission['HasDetections'] = result
submission.to_csv('tree_label_submission.csv', index=False)