import pandas
import xgboost as xgb
import numpy
import sklearn
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score
import gc
import gensim
from dtypes import dtypes

gc.enable()


def get_sentences(data_frame):
    x = data_frame.loc[:, data_frame.columns != 'HasDetections']
    x = x.loc[:, x.columns != 'MachineIdentifier']
    
    y = None
    if 'HasDetections' in data_frame:
        y = data_frame[['HasDetections']]

    # print(len(cat_columns))
    # print(cat_columns)
    # exit()
    x = x[cat_columns].to_string(header=False,
                    index=False,
                    index_names=False).split('\n')
    sentences = [' '.join(ele.split()) for ele in x]
    # print(sentences)
    # exit()
    return sentences

def train_w2v(sentences):
    model = gensim.models.Word2Vec(size=20, window=29, min_count=1, workers=4, iter=5)
    model.build_vocab(sentences)
    model.train(sentences, epochs=5, total_examples=len(sentences))
    model.save('w2v_model.mdl')
    # print(len(model.wv.vocab))
    # exit()
    print('ready')

cat_columns = [key for key, value in dtypes.items() if value is 'category']
cat_columns.remove('MachineIdentifier')
N = 1000000
train = pandas.read_csv('train.csv', dtype=dtypes, nrows=N, low_memory=True, usecols=cat_columns)
test = pandas.read_csv('test.csv', dtype=dtypes, nrows=N, low_memory=True, usecols=cat_columns)
train_sentences = get_sentences(train)
del train
test_sentences = get_sentences(test)
del test
train_w2v(train_sentences + test_sentences)